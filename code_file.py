# -*- coding: utf-8 -*-
"""Fake_News.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l-WFvZuttGnpPkYWG180SkOjjHWdlEcF
"""

#Code to set up a machine learning environment for data cleaning, analysis, and model evaluation.
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report
import re
import string

#Reads two CSV files, 'Fake.csv' and 'True.csv', into pandas DataFrames named data_fake and data_true respectively.
data_fake = pd.read_csv('Fake.csv')
data_true = pd.read_csv('True.csv')

data_fake.head()

data_true.head()

data_fake["class"]=0
data_true["class"]=1

#This code returns the number of rows and columns for both the data_fake and data_true DataFrames.
data_fake.shape, data_true.shape

#By doing this, you are ensuring that a small, untouched set of 20 articles (10 fake and 10 true) is available for you to manually inspect and test your final machine learning model.

data_fake_manual_testing = data_fake.tail(10)
for i in range(23480,23470,-1):
    data_fake.drop([i], axis=0, inplace=True)

data_true_manual_testing = data_true.tail(10)
for i in range(21416,21406,-1):
    data_true.drop([i], axis=0, inplace=True)

data_fake.shape, data_true.shape

data_fake_manual_testing["class"]=0
data_true_manual_testing["class"]=1

data_fake_manual_testing.head(10)

data_true_manual_testing.head(10)

#This code combines the data_fake and data_true DataFrames vertically, creating a new DataFrame named data_merge, and then displays the first 10 rows of the combined data.
data_merge = pd.concat([data_fake,data_true], axis=0)
data_merge.head(10)

data_merge.columns

#This drops the 'title', 'subject', and 'date' columns from the data_merge DataFrame, leaving only the article text and its label.
data = data_merge.drop(['title','subject','date'],axis=1)

#This code checks for and then sums the total number of missing values (nulls) in each column of the data DataFrame.
data.isnull().sum()

#This code randomly shuffles all the rows in the data DataFrame, reordering the dataset in place.
data=data.sample(frac=1)

data.head()

#This code resets the DataFrame's index and then removes the old index column, which is now a regular column named 'index'.

data.reset_index(inplace=True)
data.drop(['index'], axis=1, inplace=True)

data.columns

data.head()

#Lowercase Conversion: Converts all characters in the text to lowercase.
#Bracket Removal: Removes any text enclosed in square brackets [].
#Non-Word Character Removal: Replaces any non-alphanumeric characters (like punctuation) with a space.
#URL Removal: Deletes any URLs or web addresses.
#HTML Tag Removal: Strips out any HTML tags.
#Punctuation Removal: Removes all remaining punctuation.
#Newline Removal: Deletes newline characters (\n).
#Number/Digit Removal: Removes any words containing numbers.

def wordopt(text):
  text = text.lower()
  text = re.sub(r'\[.*?\]','',text)
  text = re.sub(r"\\W"," ",text)
  text = re.sub(r'https?://\S+|www\.\S+','',text)
  text = re.sub(r'<.*?>+','',text)
  text = re.sub(r'[%s]' % re.escape(string.punctuation),'',text)
  text = re.sub(r'\n','',text)
  text = re.sub(r'\w*\d\w*','',text)
  return text

data['text'] = data['text'].apply(wordopt)

x = data['text']
y = data['class']

x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.25)

#This code uses TfidfVectorizer to convert your text data (from x_train and x_test) into numerical feature vectors.
from sklearn.feature_extraction.text import TfidfVectorizer

vectorization = TfidfVectorizer()
xv_train = vectorization.fit_transform(x_train)
xv_test = vectorization.transform(x_test)

from sklearn.linear_model import LogisticRegression

LR = LogisticRegression()
LR.fit(xv_train, y_train)

pred_lr = LR.predict(xv_test)

LR.score(xv_test, y_test)

print(classification_report(y_test,pred_lr))

from sklearn.tree import DecisionTreeClassifier

DT = DecisionTreeClassifier()
DT.fit(xv_train, y_train)

pred_dt = DT.predict(xv_test)

DT.score(xv_test, y_test)

print(classification_report(y_test, pred_lr))

from sklearn.ensemble import GradientBoostingClassifier

GB = GradientBoostingClassifier(random_state=0)
GB.fit(xv_train, y_train)

pred_gb = GB.predict(xv_test)

GB.score(xv_test, y_test)

print(classification_report(y_test, pred_gb))

from sklearn.ensemble import RandomForestClassifier

RF = RandomForestClassifier(random_state=0)
RF.fit(xv_train, y_train)

pred_rf = RF.predict(xv_test)

RF.score(xv_test, y_test)

print(classification_report(y_test, pred_rf))

def output_label(n):
  if n==0:
    return "Fake News"
  elif n==1:
    return "Not a fake news"

def manual_testing(news):
  testing_news = {"text":[news]}
  new_def_test = pd.DataFrame(testing_news)
  new_def_test["text"] = new_def_test["text"].apply(wordopt)
  new_x_test = new_def_test["text"]
  new_xv_test = vectorization.transform(new_x_test)
  pred_LR = LR.predict(new_xv_test)
  pred_DT = DT.predict(new_xv_test)
  pred_GB = GB.predict(new_xv_test)
  pred_RF = RF.predict(new_xv_test)

  return print("\n\nLR Prediction: {} \nDT Prediction: {} \nGBC Prediction: {} \nRFC Prediction: {}".format(output_label(pred_LR[0]),
                                                                                                            output_label(pred_DT[0]),
                                                                                                            output_label(pred_GB[0]),
                                                                                                            output_label(pred_RF[0])))

news = str(input())
manual_testing(news)